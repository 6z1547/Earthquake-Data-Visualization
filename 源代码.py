import pandas as pd# 预处理1，删除重复值
from pyecharts import options as opts
from pyecharts.charts import Bar, Timeline
import random
#读取数据，预处理：去除重复值
df=pd.read_csv('./DXYArea.csv')
df=df.drop_duplicates()
df.to_csv("data1_去重.csv",index=0)
df = pd.read_csv("data1_去重.csv")
#建立时间轴
l = df["updateTime"].size
date = []
errordate = ["2020-07-10","2020-01-23","2020-07-28"] #去除异常数据
for i in range(l-1,-1,-1):
    if df["updateTime"][i] not in date and df["updateTime"][i] not in errordate:
        date.append(df["updateTime"][i])#建立时间轴
        
color_dir = {}#存储颜色字典
color = [     #颜色库
            "#c1232b",
            "#27727b",
            "#fcce10",
            "#e87c25",
            "#b5c334",
            "#fe8463",
            "#9bca63",
            "#fad860",
            "#f3a43b",
            "#60c0dd",
            "#d7504b",
            "#c6e579",
            "#f4e001",
            "#f0805a",
            "#26c0c0"
        ]

symbols=[ #图标的矢量路径
 'path://M15.228718 479.442051l-0.525128-10.502564c-3.150769-37.809231 25.206154-70.367179 62.490256-73.517949 17.854359-1.575385 35.708718 4.201026 49.362051 15.753847 21.005128 17.329231 28.882051 45.161026 20.48 71.942564l-3.150769 9.452307c58.814359 8.402051 117.10359 16.804103 174.867693 25.206154 22.055385 3.150769 44.110769 6.826667 66.166153 9.452308 12.603077 1.575385 19.429744-3.150769 21.005129-15.228718l37.284102-356.562051c-28.356923-2.100513-50.412308-13.128205-63.015384-38.859487-8.402051-17.329231-8.927179-37.809231-1.050257-55.138462C393.846154 26.25641 434.281026 10.502564 468.939487 25.206154c1.575385 0.525128 2.625641 1.050256 4.201026 2.100513 39.909744 21.005128 46.73641 62.490256 16.278974 108.701538 24.155897 18.904615 48.836923 38.334359 72.992821 57.238974l203.749743 159.638975c15.753846 12.603077 22.055385 11.552821 34.133334-4.726154 44.110769-61.44 88.221538-122.88 132.857436-184.32 2.100513-2.625641 4.201026-5.77641 6.301538-8.927179-17.329231-6.826667-30.982564-17.329231-39.384615-34.133334-15.228718-30.982564-4.726154-68.266667 23.630769-86.646154 29.932308-19.429744 67.741538-13.653333 90.322051 13.128205 1.575385 2.100513 3.675897 4.201026 5.77641 6.301539l8.92718 21.530256c3.675897 36.233846-9.452308 64.065641-45.161026 79.294359 0 4.201026 0.525128 8.402051 1.050257 12.603077l46.211282 400.147693c2.100513 17.329231-1.575385 23.630769-17.329231 30.457435L412.225641 853.333333c-16.804103 7.351795-23.630769 5.251282-35.18359-8.402051-69.316923-84.020513-138.108718-168.566154-207.425641-253.111795-18.379487-22.580513-37.284103-45.686154-56.188718-68.266666-26.781538 11.552821-51.462564 9.452308-73.517948-7.876924-5.251282-4.201026-9.977436-9.977436-14.70359-14.703589-3.675897-7.351795-6.826667-14.178462-9.977436-21.530257zM731.50359 789.792821l279.368205-118.678975c24.681026-10.502564 51.987692-1.575385 64.590769 19.954872 12.603077 22.055385 5.77641 49.887179-15.753846 65.641026-3.150769 2.100513-6.301538 4.201026-9.977436 5.251282L490.469744 999.844103c-21.530256 8.927179-44.635897 4.201026-58.814359-12.077949-14.178462-16.278974-17.329231-39.909744-4.726154-57.764103 6.301538-9.452308 16.278974-17.854359 26.781538-22.055384 92.422564-39.909744 185.370256-78.769231 277.792821-118.153846z M705.247179 615.975385l-52.51282 22.055384-107.651282-253.636923-42.010256 48.836923-18.379488-43.585641 40.96-50.937436 52.512821-22.055384 127.081025 299.323077z',
    'path://M536.58416131 175.93213666c-140.038699 0-253.99607 113.902393-253.99607 253.99607s113.946375 253.99607 253.99607 253.99607 253.99607-113.913389 253.99607-253.99607-113.946375-253.99607-253.99607-253.99607z m117.904756 406.052852H418.66841031v-52.382566q29.96274-23.7063 53.778995-44.839653t41.925844-40.089596q23.497385-24.783859 34.086053-43.542183a77.760182 77.760182 0 0 0 10.566676-38.594208q0-22.419826-13.370529-34.371936t-37.285743-11.963105a86.589569 86.589569 0 0 0-23.16752 3.012767 182.107485 182.107485 0 0 0-22.089962 7.762824 130.978406 130.978406 0 0 0-18.758324 10.126856l-11.63324 7.751828h-6.245444v-70.030345q13.568448-6.465355 42.464624-13.260574a243.396407 243.396407 0 0 1 55.604248-6.784224q57.121627 0 86.545587 25.432594t29.42396 71.558719a125.458665 125.458665 0 0 1-13.359533 55.725199q-13.39252 27.279838-44.410828 58.518055-19.407059 19.198145-37.725564 34.174017t-26.510152 21.221317h135.970363v60.574214z m269.389771-152.078773C923.87868831 216.06571566 750.51262631 42.66666666 536.63913931 42.66666666S149.33361631 216.07671066 149.33361631 429.90621566a386.293936 386.293936 0 0 0 132.792664 291.930548c-0.054978 0.692717-0.087964 1.396429-0.087964 2.089146v242.637717a30.028713 30.028713 0 0 0 39.583803 28.445361l214.962042-72.691256 214.91806 72.691256a30.028713 30.028713 0 0 0 39.583803-28.445361V723.93690466c0-0.703712 0-1.396429-0.076968-2.089145a386.392896 386.392896 0 0 0 132.781668-291.930548z m-710.892117 0c0-178.467975 145.140611-323.619581 323.641572-323.619581s323.630577 145.140611 323.630577 323.619581-145.140611 323.663563-323.630577 323.663564S212.94258931 608.34120366 212.94258931 429.90621566z m518.08601 494.830526l-184.878352-62.5644a30.072695 30.072695 0 0 0-19.220136 0l-184.900342 62.5644V764.82917266a387.745342 387.745342 0 0 0 389.031816 0z m0 0',
    'path://M859.390623 521.779848c-35.129389 20.817416-52.910931 52.043539-53.778324 93.244674s-21.251112 62.018551-62.452246 62.452247-71.993562 18.648935-92.810978 53.778324-49.441362 42.93592-85.004447 22.985896-71.559866-19.950023-107.122952 0-64.187031 12.577189-85.004447-22.985896-52.043539-53.344628-92.810978-53.778324-61.584855-21.251112-62.452247-62.452247-18.215239-71.993562-53.778323-93.244674-42.93592-49.441362-22.985897-85.438143 19.950023-71.559866 0-107.556647-12.577189-64.230401 22.985897-85.438143 52.910931-52.043539 53.778323-93.244675 21.251112-62.018551 62.452247-62.452246 71.993562-18.648935 92.810978-53.778324 49.441362-42.93592 85.004447-22.985896 71.559866 19.950023 107.122952 0 64.187031-12.577189 85.004447 22.985896 52.043539 53.344628 92.810978 53.778324 61.584855 21.251112 62.452246 62.452246 18.215239 71.993562 53.778324 93.244675 42.93592 49.441362 22.985896 85.438143-19.950023 71.559866 0 107.556647 12.143492 64.187031-22.985896 85.438143zM276.936682 738.627928c99.31642 2.168481 67.222905 83.703359 147.89039 85.871839 0-2.168481-155.263225 192.994791-155.263225 192.994791l-74.595739-112.327305-135.313201 15.179365 168.274109-201.668714s5.63805 19.950023 49.007666 19.950024zM667.696921 798.911694c28.19025-23.853289 3.035873-54.21202 126.205582-67.222905l170.44259 188.657829-132.711024-17.347846-46.839185 121.001228-189.958918-197.331752a86.175427 86.175427 0 0 0 72.860955-27.756554z M396.203126 187.40011H627.796874v43.369616l-115.796874 86.739232h39.032654a66.355512 66.355512 0 0 1 55.079412 28.623946c14.311973 19.082631 21.684808 38.598958 21.684808 58.115285v86.305536a90.035323 90.035323 0 0 1-22.5522 61.584854c-15.179366 16.91415-32.960908 25.588073-54.21202 25.588074H473.401042c-45.538097 0-71.12617-29.057643-77.197916-86.739232h39.032654c1.734785 29.057643 14.745669 43.803312 38.598958 43.803312h38.598958a35.432976 35.432976 0 0 0 27.322858-12.577188 45.668205 45.668205 0 0 0 11.2761-30.792428v-86.739231c0-6.939139-3.469569-16.046758-9.541315-26.889162a31.009275 31.009275 0 0 0-29.057643-16.480454H435.23578v-43.369616l115.796874-86.739232H396.203126z'
]

tl = Timeline()#建立时间序列图
f = 0
for i in date:
    #3.15后有中国的数据
    if i=="2020-03-15":
        f=1
    #排序
    df_sub = df[df["updateTime"]==i].sort_values(by="province_confirmedCount",ascending=False)
    df_sub = df_sub[df_sub["province_confirmedCount"]!=0]
    df_new = df_sub[0:1]
    #选择前10的国家喝数量
    country = [df_new.iat[0,1]]
    counts = [float(df_new.iat[0,2])]
    l = df_sub["updateTime"].size

#提取第i天的数据

    for j in range(l):
        if df_sub.iat[j,1] not in country:
            if df_sub.iat[j,0]=="中国" and f:
                if df_sub.iat[j,1]!="中国":
                    continue  
            country.append(df_sub.iat[j,1])
            counts.append(float(df_sub.iat[j,2]))
            if country[-1] not in color_dir.keys():
                color_dir[country[-1]]=random.choice(color)
        if len(country)>=8:
            break
    country = country[::-1]
    counts = counts[::-1]
    
    #填充颜色
    y=[]
    for j in range(len(country)):
        if j==len(country)-1:
            y.append(
            opts.BarItem(
                name=country[j],
                value=counts[j],
                itemstyle_opts=opts.ItemStyleOpts(color="#c1232b"),
            
            )
        )
        else:
            
            y.append(
            opts.BarItem(
                name=country[j],
                value=counts[j],
                itemstyle_opts=opts.ItemStyleOpts(color=color_dir[country[j]]),
            
            )
        )
    bar = (
        Bar()
        .add_xaxis(country)
        .add_yaxis("",y,label_opts=opts.LabelOpts(position="top",font_weight="bold"),category_gap=20,
                  markpoint_opts=opts.MarkPointOpts(data = [
opts.MarkPointItem(name="",coord=[counts[7], country[7]],symbol=symbols[0],itemstyle_opts=opts.ItemStyleOpts(color="#c1232b",border_color='#f2d643')),
opts.MarkPointItem(name="",coord=[counts[6], country[6]],symbol=symbols[1],itemstyle_opts=opts.ItemStyleOpts(color=color_dir[country[6]],border_color='grey')),
opts.MarkPointItem(name="",coord=[counts[5], country[5]],symbol=symbols[2],itemstyle_opts=opts.ItemStyleOpts(color=color_dir[country[5]],border_color='#000000')),

]))
        .reversal_axis()
        .set_global_opts(
            title_opts=opts.TitleOpts("全球确诊情况(时间: {} )".format(i),pos_left=350,padding=[30,20]),
            xaxis_opts=opts.AxisOpts(max_=int(max(counts)*1.05))
        )
    )
    
    tl.add(bar, "{}".format(i))
    tl.add_schema(play_interval=570, is_loop_play=False)#播放间隔，是否循环播放
    #break
tl.render("生成动态图.html")
